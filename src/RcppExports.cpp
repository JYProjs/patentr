// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// get_xml_sizes
std::vector<int> get_xml_sizes(std::string input_file);
RcppExport SEXP _patentr_get_xml_sizes(SEXP input_fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type input_file(input_fileSEXP);
    rcpp_result_gen = Rcpp::wrap(get_xml_sizes(input_file));
    return rcpp_result_gen;
END_RCPP
}
// txt_to_df_cpp
int txt_to_df_cpp(std::string input_file, std::string output_file, bool append, bool header);
RcppExport SEXP _patentr_txt_to_df_cpp(SEXP input_fileSEXP, SEXP output_fileSEXP, SEXP appendSEXP, SEXP headerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type input_file(input_fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type output_file(output_fileSEXP);
    Rcpp::traits::input_parameter< bool >::type append(appendSEXP);
    Rcpp::traits::input_parameter< bool >::type header(headerSEXP);
    rcpp_result_gen = Rcpp::wrap(txt_to_df_cpp(input_file, output_file, append, header));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_patentr_get_xml_sizes", (DL_FUNC) &_patentr_get_xml_sizes, 1},
    {"_patentr_txt_to_df_cpp", (DL_FUNC) &_patentr_txt_to_df_cpp, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_patentr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
